esphome:
  name: apollo-multisensor-mk1
  includes:
    - ld2410_uart.h
  friendly_name: Apollo Multisensor Mk1
  comment: Apollo Multisensor Mk1
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio
  
  on_boot:
    priority: 900
    then:
      - lambda: |-
          id(cpu_speed) = ESP.getCpuFreqMHz() ;
      - script.execute: get_config
      #- lambda: |-
      #    auto uart_component = static_cast<LD2410 *>(ld2410);
      #    uart_component->setNumbers(maxMovingDistanceRange, maxStillDistanceRange, noneDuration);
      

  project:
    name: "Apollo.Multisensor"
    version: "Mk1"

  min_version: 2023.6.1

esp32:
  board: esp32-c3-devkitm-1
  #board: featheresp32-s2

globals:
   - id: cpu_speed
     type: int
     restore_value: no
     initial_value: '0'

# Enable Home Assistant API
api:
  #encryption:
  #  key: "Csv8khdaMzNQyVYMYVpCfcDFHXiJYiYjZ+KMY8g4xF4="

logger:

ota:
  password: "apolloautomation"

wifi:
  ssid: "Schirmer-IoT" #!secret wifi_ssid
  password: "Apollo1359!" #!secret wifi_password
  power_save_mode: NONE

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Apollo Multisensor Hotspot"
    password: ""

captive_portal:

web_server:
  port: 80

i2c:
  sda: 4
  scl: 5
  id: bus_a

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: gpio
    name: mmWave Presence
    id: mmwave_presence_ld2410
    pin: GPIO11
    device_class: motion
    on_state:
      then:
        - if: 
            condition: 
              - binary_sensor.is_off: mmwave_presence_ld2410
            then: 
              - delay: 150ms
              - script.execute: clear_targets




sensor:
  - platform: template
    name: "ESP Cpu Speed"
    accuracy_decimals: 0
    unit_of_measurement: Mhz
    lambda: |-
      return (id(cpu_speed));
    entity_category: "diagnostic"
  
  - platform: template
    id: sys_esp_temperature
    name: ESP Temperature
    lambda: return temperatureRead();
    unit_of_measurement: Â°C
    device_class: TEMPERATURE
    update_interval: 30s

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 10s
  
  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: ESP Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: 'kB'
    state_class: measurement
    entity_category: "diagnostic"

  - platform: wifi_signal 
    name: RSSI
    id: wifi_signal_db
    update_interval: 5s
    entity_category: "diagnostic"

  - platform: scd4x
    co2:
      name: "CO2"
      id: "co2"
    temperature:
      name: SCD40 Temperature
      id: scd40temperature
    humidity:
      name: SCD40 Humidity
      id: scd40humidity
    automatic_self_calibration: false
    update_interval: 10s
    measurement_mode: "periodic"
    address: 0x62
    i2c_id: bus_a

  - platform: custom
    lambda: |-
      auto uart_component = static_cast<LD2410 *>(ld2410);
      //return {uart_component->movingTargetDistance,uart_component->movingTargetEnergy,uart_component->stillTargetDistance,uart_component->stillTargetEnergy,uart_component->detectDistance};
      return {};
    sensors:
    
  - platform: template
    name: Moving Target Distance
    id: movingTargetDistance
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    internal: true
    
  - platform: template
    name: Moving Target Energy
    id: movingTargetEnergy
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true
    
  - platform: template
    name: Still Target Distance
    id: stillTargetDistance
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    internal: true
    
  - platform: template
    name: Still Target Energy
    id: stillTargetEnergy
    unit_of_measurement: "%"
    accuracy_decimals: 0
    internal: true
    
  - platform: template
    name: Detect Distance
    id: detectDistance
    unit_of_measurement: "cm"
    accuracy_decimals: 0
    internal: true
  

#light:
#  - platform: neopixelbus
#    type: GRB
#    variant: WS2811
#    pin: 3
#    num_leds: 1
#    name: "NeoPixel Light"

uart:
  id: uart_bus
  tx_pin:
    number: GPIO18
  rx_pin: 
    number: GPIO19
  baud_rate: 256000
  parity: NONE
  stop_bits: 1
      
custom_component:
  - lambda: |-
      return {new LD2410(id(uart_bus))};
    components:
      - id: ld2410
    
 
time:
  - platform: sntp
    id: time_sntp



switch:
  - platform: safe_mode
    name: mmWave Safe Mode
    
  - platform: template
    name: mmWave Config Mode
    id: configmode
    optimistic: true
    # assumed_state: false
    turn_on_action:
      # - switch.turn_off: engineering_mode
      - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(true);'
      - delay: 100ms
      - script.execute: clear_targets
    turn_off_action:
      - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(false);'

  - platform: template
    name: Show Target Stats
    id: show_stats
    optimistic: true
    internal: true
    turn_off_action:
      - script.execute: clear_targets


  
    


number:  
  - platform: template
    name: "mmWave Max Distance (M)"
    id: maxconfigDistance
    unit_of_measurement: "M"
    min_value: 0.75
    max_value: 6
    step: 0.75
    update_interval: never
    optimistic: true
    set_action:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setMaxDistancesAndNoneDuration(x/0.75,x/0.75,id(noneDuration).state);
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 50ms
      - switch.turn_off: configmode

  - platform: template
    name: "Sensitivity Threshold (%)"
    id: allSensitivity
    min_value: 10
    max_value: 100
    step: 5
    mode: box
    update_interval: never
    optimistic: true
    set_action:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setAllSensitivity(x);
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 50ms
      - switch.turn_off: configmode
      
  - platform: template
    name: "Motion Hold (sec)"
    id: noneDuration
    min_value: 0
    # max_value: 32767
    max_value: 900
    step: 1
    mode: box
    update_interval: never
    optimistic: true
    set_action:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: |-
          auto uart_component = static_cast<LD2410 *>(ld2410);
          uart_component->setMaxDistancesAndNoneDuration(id(maxconfigDistance).state, id(maxconfigDistance).state, x);
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 50ms
      - switch.turn_off: configmode
button:
  - platform: restart
    name: "mmWave Factory Reset"
    entity_category: diagnostic
    on_press:
      - switch.turn_on: configmode
      - delay: 50ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->factoryReset();'
      - delay: 150ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->reboot();'
      - delay: 150ms

script:
  - id: get_config
    then:
      - switch.turn_on: configmode
      - delay: 500ms
      - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
      - delay: 500ms
      - switch.turn_off: configmode
      
  - id: clear_targets
    then:
      - lambda: |-
          //id(hasTarget).publish_state(0);
          //id(hasMovingTarget).publish_state(0);
          //id(hasStillTarget).publish_state(0);
          id(movingTargetDistance).publish_state(0);
          id(movingTargetEnergy).publish_state(0);
          id(stillTargetDistance).publish_state(0);
          id(stillTargetEnergy).publish_state(0);
          id(detectDistance).publish_state(0);