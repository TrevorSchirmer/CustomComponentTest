#Define Project
esphome:
  name: apollo-msr-mk1
  friendly_name: Apollo Multisensor Mk1 (MSR-1)
  comment: Apollo Multisensor Mk1 (MSR-1)
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio

  on_boot:
    priority: 900
    then:
      - lambda: |-
          id(cpu_speed) = ESP.getCpuFreqMHz();
      - lambda: |-
          id(ld2410_radar) -> set_timeout(id(ld2410_radar_timeout).state);
      - lambda: |-
          id(ld2410_radar) -> set_max_move_distance(id(ld2410_radar_move_distance).state);
      - lambda: |-
          id(ld2410_radar) -> set_max_still_distance(id(ld2410_radar_still_distance).state);
      

  project:
    name: "Apollo.Multisensor"
    version: "MSR-1"

  min_version: 2023.6.1

# Define Board
esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino
    version: 2.0.9
    platform_version: 6.3.2
  #board: featheresp32-s2

globals:
  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: "0"

# Enable Home Assistant API
# Also Add Buzzer Service Connection
api:
  #encryption:
  #  key: "Csv8khdaMzNQyVYMYVpCfcDFHXiJYiYjZ+KMY8g4xF4="
  services:
    - service: play_buzzer
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

    #Co2 Calibration Service
    - service: calibrate_co2_value
      variables:
        co2_ppm: int
      then:
        - scd4x.perform_forced_calibration:
            value: !lambda 'return co2_ppm;'
            id: scd40

logger:

ota:
  password: "apolloautomation"
  safe_mode: false

wifi:
  output_power: 15dB
  power_save_mode: LIGHT
  reboot_timeout: 10min
  ssid: "Schirmer-IoT" #!secret wifi_ssid
  password: "Apollo1359!" #!secret wifi_password


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Apollo MSR1 Hotspot"
    password: ""

captive_portal:

web_server:
  port: 80

# Set Up Key Ports For Communication
i2c:
  sda: GPIO1
  scl: GPIO0
  id: bus_a

uart:
  tx_pin: GPIO21
  rx_pin: GPIO20
  baud_rate: 256000
  parity: NONE
  stop_bits: 1


# Numbers For Configuration
number:
  - platform: template
    name: "Radar Max Move Distance"
    id: ld2410_radar_move_distance
    restore_value: true
    initial_value: 4.5
    min_value: 0.75
    max_value: 6.0
    entity_category: "CONFIG"
    unit_of_measurement: "m"
    optimistic: true
    update_interval: never
    step: 0.1
    set_action:
      - lambda: |-
          id(ld2410_radar) -> set_max_move_distance(id(ld2410_radar_move_distance).state);
          
  - platform: template
    name: "Radar Max Still Distance"
    id: ld2410_radar_still_distance
    restore_value: true
    initial_value: 4.5
    min_value: 0.75
    max_value: 6.0
    entity_category: "CONFIG"
    unit_of_measurement: "m"
    optimistic: true
    update_interval: never
    step: 0.1
    set_action:
      - lambda: |-
          id(ld2410_radar) -> set_max_still_distance(id(ld2410_radar_still_distance).state);
  - platform: template
    name: "Radar Timeout"
    id: ld2410_radar_timeout
    restore_value: true
    initial_value: 5
    min_value: 1
    max_value: 120
    entity_category: "CONFIG"
    unit_of_measurement: "s"
    optimistic: true
    update_interval: never
    step: 1
    set_action:
      - lambda: |-
          id(ld2410_radar) -> set_timeout(id(ld2410_radar_timeout).state);
  
  # Temperature Offsets
  - platform: template
    name: SCD40 Temperature Offset
    id: scd40_temperature_offset
    restore_value: true
    initial_value: 20.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1

  - platform: template
    name: BME280 Temperature Offset
    id: bme280_temperature_offset
    restore_value: true
    initial_value: 20.0
    min_value: -70.0
    max_value: 70.0
    entity_category: "CONFIG"
    unit_of_measurement: "°C"
    optimistic: true
    update_interval: never
    step: 0.1
  

# Buzzer
output:
  - platform: ledc
    pin: GPIO10
    id: buzzer
rtttl:
 output: buzzer



binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: ld2410
    has_target:
      name: Presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target
    

ld2410:
  timeout: 10s
  id: ld2410_radar

sensor:
  - platform: template
    name: "ESP Cpu Speed"
    accuracy_decimals: 0
    unit_of_measurement: Mhz
    lambda: |-
      return (id(cpu_speed));
    entity_category: "diagnostic"

  - platform: template
    id: sys_esp_temperature
    name: ESP Temperature
    lambda: return temperatureRead();
    unit_of_measurement: °C
    device_class: TEMPERATURE
    update_interval: 30s
    

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 30s

  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: ESP Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: scd4x
    id: scd40
    co2:
      name: "CO2"
      id: "co2"
    temperature:
      name: SCD40 Temperature
      id: scd40temperature
      filters:
        - lambda: return x + id(scd40_temperature_offset).state;
    humidity:
      name: SCD40 Humidity
      id: scd40humidity
    automatic_self_calibration: false
    update_interval: 60s
    measurement_mode: "periodic"
    i2c_id: bus_a
    ambient_pressure_compensation_source: "bme280pressure"
    


  - platform: ld2410
    moving_distance:
      name : Moving Distance
      id: moving_distance
    still_distance:
      name: Still Distance
      id: still_distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance

  - platform: bme280
    temperature:
      name: "BME280 Temperature"
      id: bme280temperature
      filters:
        - lambda: return x + id(bme280_temperature_offset).state;
    pressure:
      name: "BME280 Pressure"
      id: bme280pressure
    humidity:
      name: "BME280 Humidity"
      id: bme280humidity
    update_interval: 60s
    i2c_id: bus_a
    address: 0x76
  
  - platform: ltr390
    uv:
      name: "LTR390 UV"
      id: ltr390uv
    light:
      name: "LTR390 Light"
      id: ltr390light
    uv_index:
      name: "LTR390 UV Index"
      id: ltr390uvindex
    ambient_light:
      name: "LTR390 Ambient Light"
      id: ltr390ambientlight
    update_interval: 60s


light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO3
    num_leds: 1
    name: "RGB Light"


time:
  - platform: sntp
    id: time_sntp

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: Factory Reset
    id: factory_reset_all
