esphome:
  name: apollo-multisensor-mk1
  friendly_name: Apollo Multisensor Mk1
  comment: Apollo Multisensor Mk1
  name_add_mac_suffix: true
  platformio_options:
    board_build.flash_mode: dio
    board_build.extra_flags:
      - "-DARDUINO_USB_CDC_ON_BOOT=0"

  on_boot:
    priority: 900
    then:
      - lambda: |-
          id(cpu_speed) = ESP.getCpuFreqMHz() ;
      - rtttl.play: 'two_short:d=4,o=5,b=100:16e6,16e6'
      - lambda: |-
          //id(ld2410_radar) -> set_max_distances_timeout_(id(ld2410_radar_move_distance).state, id(ld2410_radar_still_distance).state, id(ld2410_radar_timeout).state);
      
      

  project:
    name: "Apollo.Multisensor"
    version: "Multisensor Mk1"

  min_version: 2023.6.1

esp32:
  board: deneyapmini
  framework:
    type: arduino
  #board: featheresp32-s2

globals:
  - id: cpu_speed
    type: int
    restore_value: no
    initial_value: "0"

# Enable Home Assistant API
api:
  #encryption:
  #  key: "Csv8khdaMzNQyVYMYVpCfcDFHXiJYiYjZ+KMY8g4xF4="
  services:
    - service: play_buzzer
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'

logger:

ota:
  password: "apolloautomation"

wifi:
  ssid: "Schirmer-IoT" #!secret wifi_ssid
  password: "Apollo1359!" #!secret wifi_password
  output_power: 10

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Apollo Multisensor Hotspot"
    password: ""

captive_portal:

web_server:
  port: 80

i2c:
  sda: 4
  scl: 5
  id: bus_a

uart:
  tx_pin: GPIO12
  rx_pin: GPIO11
  baud_rate: 256000
  parity: NONE
  stop_bits: 1

number:
  - platform: template
    name: "Radar Max Move Distance"
    id: ld2410_radar_move_distance
    restore_value: true
    initial_value: 4.5
    min_value: 0.75
    max_value: 6.0
    entity_category: "CONFIG"
    unit_of_measurement: "m"
    optimistic: true
    update_interval: never
    step: 0.1
    set_action:
      - lambda: |-
          id(ld2410_radar) -> set_max_move_distance(id(ld2410_radar_move_distance).state);
          
  - platform: template
    name: "Radar Max Still Distance"
    id: ld2410_radar_still_distance
    restore_value: true
    initial_value: 4.5
    min_value: 0.75
    max_value: 6.0
    entity_category: "CONFIG"
    unit_of_measurement: "m"
    optimistic: true
    update_interval: never
    step: 0.1
    set_action:
      - lambda: |-
          id(ld2410_radar) -> set_max_still_distance(id(ld2410_radar_still_distance).state);
  - platform: template
    name: "Radar Timeout"
    id: ld2410_radar_timeout
    restore_value: true
    initial_value: 5
    min_value: 1
    max_value: 120
    entity_category: "CONFIG"
    unit_of_measurement: "s"
    optimistic: true
    update_interval: never
    step: 1
    set_action:
      - lambda: |-
          id(ld2410_radar) -> set_timeout(id(ld2410_radar_timeout).state);
  


output:
  - platform: ledc
    pin: GPIO35
    id: buzzer

rtttl:
 output: buzzer

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: ld2410
    has_target:
      name: Presence
    has_moving_target:
      name: Moving Target
    has_still_target:
      name: Still Target
  - platform: gpio
    name: mmWave Presence
    id: mmwave_presence_ld2410
    pin: GPIO10
    device_class: motion

ld2410:
  timeout: 150s
  id: ld2410_radar

sensor:
  - platform: template
    name: "ESP Cpu Speed"
    accuracy_decimals: 0
    unit_of_measurement: Mhz
    lambda: |-
      return (id(cpu_speed));
    entity_category: "diagnostic"

  - platform: template
    id: sys_esp_temperature
    name: ESP Temperature
    lambda: return temperatureRead();
    unit_of_measurement: Â°C
    device_class: TEMPERATURE
    update_interval: 30s

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 10s

  - platform: template
    id: esp_memory
    icon: mdi:memory
    name: ESP Free Memory
    lambda: return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024;
    unit_of_measurement: "kB"
    state_class: measurement
    entity_category: "diagnostic"

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 5s
    entity_category: "diagnostic"

  - platform: scd4x
    co2:
      name: "CO2"
      id: "co2"
    temperature:
      name: SCD40 Temperature
      id: scd40temperature
    humidity:
      name: SCD40 Humidity
      id: scd40humidity
    automatic_self_calibration: false
    update_interval: 10s
    measurement_mode: "periodic"
    address: 0x62
    i2c_id: bus_a
  - platform: ld2410
    moving_distance:
      name : Moving Distance
      id: moving_distance
    still_distance:
      name: Still Distance
      id: still_distance
    moving_energy:
      name: Move Energy
    still_energy:
      name: Still Energy
    detection_distance:
      name: Detection Distance




light:
  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO4
    num_leds: 1
    name: "RGB Light"





time:
  - platform: sntp
    id: time_sntp

button:
  #- platform: template
  #  name: "Enable LD2410 BLE"
  #  # disabled_by_default: True
  #  entity_category: "config"
  #  icon: mdi:bluetooth
  #  on_press:
  #    lambda: |-
  #      id(ld2410_radar) -> ble_control(true);
#
  #- platform: template
  #  name: "Disable LD2410 BLE"
  #  # disabled_by_default: True
  #  entity_category: "config"
  #  icon: mdi:bluetooth-off
  #  on_press:
  #    lambda: |-
  #      id(ld2410_radar) -> ble_control(false);
#
  #- platform: template
  #  name: "LD2410 Reboot"
  #  icon: mdi:radar
  #  entity_category: "config"
  #  on_press:
  #    lambda: |-
  #      // auto* radar = LD2410Component::get(ld2410); 
  #      // radar -> roboot();
  #      id(ld2410_radar) -> reboot();

  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: Factory Reset
    id: factory_reset_all
